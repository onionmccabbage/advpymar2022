# Python has 'comprehensions' and 'generators'
# here is a range
r = range(1,10,2) # start, stop-before, step
# we can make a generator from this range
# this will comprehensively generate values for each member of the range
g = (i*i for i in r) # NB the round brackets make a generator
l = [i**0.5 for i in r] # the square brackets return a LIST
# remember a generator does NOT persist the values in memory
# whereas a list WILL store the values (in a list, in memory)

if __name__ == '__main__':
    print(g, l)
    # we can iterate over every member generated by our generator
    for v in l: # or in r or in g
        print(v, end=',')
    print('\n')
    for v in l: 
        print(v, end=',')
    print('\n')
    # we can all the next member of our geneerator directly
    print( g.__next__() )
    print( g.__next__() )
    print( g.__next__() )
    for v in g:
        print(v, end=',')
    print('\n')
    for v in g: # nope - the generator is exhausted
        print(v, end=',')